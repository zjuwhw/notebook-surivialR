install.packages("asaur")
#install.packages("asaur")
library(asaur)
gastricXelox[23:27,]
library(survival)
head(survexp.us)
str(survexp.us)
class(survexp.us)
hazMale <- survexp.us[,"male","2004"]
hazMale
length(tm)
library(survival)
tm <- c(0,
1/365, # first day of life
7/365, # seventh day of life
28/365, # fourth week of life
1:110) # subsequent years
hazMale <- survexp.us[,"male","2004"]
hazFemale <- survexp.us[,"female","2004"]
length(tm)
length(hazMale)
1/70
lamdba=1/70
layout(matrix(1:4,2,2))
plot(1:100, rep(lambda,100), xlab="time", y="Hazard")
rep(lambda,100)
lambba=1/70
layout(matrix(1:4,2,2))
plot(1:100, rep(lambda,100), xlab="time", y="Hazard")
lambda=1/70
layout(matrix(1:4,2,2))
plot(1:100, rep(lambda,100), xlab="time", y="Hazard")
rep(lambda,100)
lambda=1/70
layout(matrix(1:4,2,2))
plot(1:100, rep(lambda,100), xlab="time", ylab = ="Hazard")
lambda=1/70
layout(matrix(1:4,2,2))
plot(1:100, rep(lambda,100), xlab="time", ylab="Hazard")
plot(1:100, exp(-lambda*(1:100)), xlab="time", ylab="Survival")
plot(1:100, lambda*(1:100), xlab="time", ylab="Cumulative hazard")
plot(1:100, lambda*exp(-lambda*(1:100)), xlab="time", ylab="PDF")
lambda=1/70
layout(matrix(1:4,2,2))
plot(1:100, rep(lambda,100), xlab="time", ylab="Hazard", ylim=c(0,0.01))
plot(1:100, exp(-lambda*(1:100)), xlab="time", ylab="Survival")
plot(1:100, lambda*(1:100), xlab="time", ylab="Cumulative hazard")
plot(1:100, lambda*exp(-lambda*(1:100)), xlab="time", ylab="PDF")
lambda=1/70
layout(matrix(1:4,2,2))
plot(1:100, rep(lambda,100), xlab="time", ylab="Hazard", ylim=c(0,2/70))
plot(1:100, exp(-lambda*(1:100)), xlab="time", ylab="Survival")
plot(1:100, lambda*(1:100), xlab="time", ylab="Cumulative hazard")
plot(1:100, lambda*exp(-lambda*(1:100)), xlab="time", ylab="PDF")
h = function(t, alpha, lambda){
return(alpha*(lambda^alpha)*(t^(alpha-1)))
}
lambda=1/70
plot(1:80, h(1:80, alpha=1, lambda), xlab="time", ylab="hazard")
lines(1:80, h(1:80, alpha=1.5, lambda), col="red")
lines(1:80, h(1:80, alpha=0.75, lambda), col="blue")
1.0.04
1/0.04
h = function(t, alpha, lambda){
return(alpha*(lambda^alpha)*(t^(alpha-1)))
}
lambda=0.03
plot(1:80, h(1:80, alpha=1, lambda), xlab="time", ylab="hazard", type="l")
lines(1:80, h(1:80, alpha=1.5, lambda), col="red")
lines(1:80, h(1:80, alpha=0.75, lambda), col="blue")
text(40, 0.03, "alpha=1, lambda=0.03")
### generate random variables
set.seed(1)
tt.weib = rweibull(1000, shape=1.5, scale=1/0.03)
mean(tt.weib); median(tt.weib)
### the theoretical mean and median
gamma(1+1/1.5)/0.03
(log(2)^(1/1.5))/0.03
gamma(1)
gamma(2)
gamma(3)
gamma(10)
9!
factorial(9)
### back to the Example 2.1
tm = 1:110
hazMale = survexp.us[,"male", "2004"]
### back to the Example 2.1
library(survival)
tm = 1:110
hazMale = survexp.us[,"male", "2004"]
hazFemale = survep.us[,"female", "2004"]
### back to the Example 2.1
library(survival)
tm = 1:110
hazMale = survexp.us[,"male", "2004"]
hazFemale = survexp.us[,"female", "2004"]
length(hazMale)
### back to the Example 2.1
library(survival)
tm = 1:110
hazMale = survexp.us[,"male", "2004"]
hazFemale = survexp.us[,"female", "2004"]
tm.diff =  diff(tm) ## time intervals
survMale = exp(-cumsum(hazMale*tm.diff)*365.24)
survFemale = exp(-cumsum(hazFemale*tm.diff)*365.24)
length(tm.diff)
head(tm.diff)
head(survMale)
length(survMale)
sum(survMale*tm.diff)
mean(survMale*tm.diff)
mean(survMale*tm.diff*365.24)
head(survMale)
head(tm.diff)
library(survival)
time = c(7,6,6,5,2,4)
status = c(0,1,0,0,1,1)
surv_obj <- Surv(time, status)
summary(surv_obj)
library(survival)
time = c(7,6,6,5,2,4)
status = c(0,1,0,0,1,1)
surv_obj <- Surv(time, status)
fit <- survreg(surv_obj ~ 1, dist = "exponential")
summary(fit)
fit$scale
1/fit$scale
exp(2.303)
1/exp(2.303)
fit$coefficients
1/exp(fit$coefficients)
library(survival)
time = c(7,6,6,5,2,4)
status=c(0,1,0,0,1,1)
Surv(time, status)
result.km = survfit(Surv(time, status)~1)
summary(result.km)
1/6
1/5
result.km
summary(result.km2)
library(survival)
time = c(7,6,6,5,2,4)
status=c(0,1,0,0,1,1)
Surv(time, status)
result.km = survfit(Surv(time, status)~1)
result.km
summary(result.km)
plot(result.km)
result.km2 = survfit(Surv(time, status)~1, conf.type="log-log")
summary(result.km2)
?survfit
head(gastricXelox)
library(asaur)
timeMonths = gastricXelx$timeWeeks * 7 /30.25
library(asaur)
timeMonths = gastricXelox$timeWeeks * 7 /30.25
?hline
?abline
result.km
library(asaur)
timeMonths = gastricXelox$timeWeeks * 7 /30.25
delta = gastricXelox$delta
result.km = survfit(Surv(timeMonths, delta)~1, conf.type="log-log")
library(survival)
time = c(7,6,6,5,2,4)
status=c(0,1,0,0,1,1)
Surv(time, status)
result.km = survfit(Surv(time, status)~1)
result.km
summary(result.km)
## the default value for conf.type option is "log"
result.km2 = survfit(Surv(time, status)~1, conf.type="log-log")
summary(result.km2)
layout(matrix(1:2,1,2))
plot(result.km, main="log")
plot(result.km2, main="log-log")
library(asaur)
timeMonths = gastricXelox$timeWeeks * 7 /30.25
delta = gastricXelox$delta
result.km = survfit(Surv(timeMonths, delta)~1, conf.type="log-log")
plot(result.km, conf.int=T, mark="|", xlab="Time in months", ylab="Survival probability",
main="Progression-free survival in gastric cancer patients")
?segment
result.km
result.km[3]
str(result.km)
head(delta)
table(delta)
library(survival)
tt = c(6, 7, 10, 15, 19, 25)
delta = c(1, 0, 1, 1, 0, 1)
trt = c(0, 0, 1, 0, 1, 1)  ## group 0 or 1
survdiff(Surv(tt, delta)~trt)
summary(survdiff(Surv(tt, delta)~trt))
diff = survdiff(Surv(tt, delta)~trt)
library(asaur)
Progression.d = as.date(as.character(progression))
library(asaur)
attach(pancreatic)
Progression.d = as.date(as.character(progression))
head(progression)
length(progression)
as.date(progression)
as.Date(progression)
library(asaur)
attach(pancreatic)
Progression.d = as.Date(as.character(progression))
OnStudy.d = as.Date(as.character(onstudy))
onstudy
as.character(onstudy)
?as.Date
OnStudy.d = as.Date(as.character(onstudy), format="%M/%D/%Y")
OnStudy.d
as.Date(as.character(onstudy))
as.character(progression)
as.character(onstudy)
as.Date(as.character(onstudy))
as.Date(as.character(onstudy), "%m/%d/%Y"))
as.Date(as.character(onstudy), "%m/%d/%Y")
library(survival)
tt = c(6, 7, 10, 15, 19, 25)
delta = c(1, 0, 1, 1, 0, 1)
trt = c(0, 0, 1, 0, 1, 1)  ## group 0 or 1
survfit(Surv(tt,delta)~1)
library(survival)
tt = c(6, 7, 10, 15, 19, 25)
delta = c(1, 0, 1, 1, 0, 1)
trt = c(0, 0, 1, 0, 1, 1)  ## group 0 or 1
summary(survfit(Surv(tt,delta)~1))
?optim
plsimple = function(beta){
psi = exp(beta)
l = beta-log(3*psi+3)-log(3*psi+1)-log(2*psi+1)
return(l)
}
## fnscale=1 means the optim will find the maximum
result = optim(par=0, fn=plsimple, metho="L-BFGS-B", control=list(fnscale=-1), lower=-3, upper=1)
plsimple = function(beta){
psi = exp(beta)
l = beta-log(3*psi+3)-log(3*psi+1)-log(2*psi+1)
return(l)
}
## fnscale=1 means the optim will find the maximum
result = optim(par=0, fn=plsimple, method="L-BFGS-B", control=list(fnscale=-1), lower=-3, upper=1)
result$par
result
#seq(from=-3, to=1,
?seq
result$par
result$value
plsimple(result$par)
plsimple = function(beta){
psi = exp(beta)
l = beta-log(3*psi+3)-log(3*psi+1)-log(2*psi+1)
return(l)
}
## fnscale=1 means the optim will find the maximum
result = optim(par=0, fn=plsimple, method="L-BFGS-B", control=list(fnscale=-1), lower=-3, upper=1)
### MPLE
result$par
betas = seq(-3,1,length.out=100)
plot(betas, plsimple(betas), type="l", xlab="beta", ylab="log partial likelihood")
points(result$par, plsimple(result$par), col="blue")
plsimple = function(beta){
psi = exp(beta)
l = beta-log(3*psi+3)-log(3*psi+1)-log(2*psi+1)
return(l)
}
## fnscale=1 means the optim will find the maximum
result = optim(par=0, fn=plsimple, method="L-BFGS-B", control=list(fnscale=-1), lower=-3, upper=1)
### MPLE
result$par
betas = seq(-3,1,length.out=100)
plot(betas, plsimple(betas), type="l", xlab="beta", ylab="log partial likelihood")
points(result$par, plsimple(result$par), col="blue", type="solid")
plsimple = function(beta){
psi = exp(beta)
l = beta-log(3*psi+3)-log(3*psi+1)-log(2*psi+1)
return(l)
}
## fnscale=1 means the optim will find the maximum
result = optim(par=0, fn=plsimple, method="L-BFGS-B", control=list(fnscale=-1), lower=-3, upper=1)
### MPLE
result$par
betas = seq(-3,1,length.out=100)
plot(betas, plsimple(betas), type="l", xlab="beta", ylab="log partial likelihood")
points(result$par, plsimple(result$par), col="blue", pch=16)
plsimple = function(beta){
psi = exp(beta)
l = beta-log(3*psi+3)-log(3*psi+1)-log(2*psi+1)
return(l)
}
## fnscale=1 means the optim will find the maximum
result = optim(par=0, fn=plsimple, method="L-BFGS-B", control=list(fnscale=-1), lower=-3, upper=1)
### MPLE
result$par
betas = seq(-3,1,length.out=100)
plot(betas, plsimple(betas), type="l", xlab="beta", ylab="log partial likelihood")
points(result$par, plsimple(result$par), col="blue", pch=16)
points(0, plsimple(0), col="red", pch=16)
plsimple = function(beta){
psi = exp(beta)
l = beta-log(3*psi+3)-log(3*psi+1)-log(2*psi+1)
return(l)
}
## fnscale=1 means the optim will find the maximum
result = optim(par=0, fn=plsimple, method="L-BFGS-B", control=list(fnscale=-1), lower=-3, upper=1)
### MPLE
result$par
betas = seq(-4,1.2,length.out=100)
plot(betas, plsimple(betas), type="l", xlab="beta", ylab="log partial likelihood")
points(result$par, plsimple(result$par), col="blue", pch=16)
points(0, plsimple(0), col="red", pch=16)
### calculate the S(beta=0)
install.packages("numDeriv")
length(tt)
plsimple(0)
plsimple(0)/plsimple(result$par)
plsimple(result$par)
### use a package called
install.packages("DescTools")
library(DescTools)
library(survival)
tt = c(6, 7, 10, 15, 19, 25)
delta = c(1, 0, 1, 1, 0, 1)
trt = c(0, 0, 1, 0, 1, 1)  ## group 0 or 1
summary(survfit(Surv(tt,delta)~1))
result.cox = coxph(Surv(tt, delta)~trt)
summary(result.cox) ## provides the results of these three tests
basehaz(result.cox, centered=F)
basehaz(result.cox, centered=F)
survfit(result.cox)
library(survival)
### beta ia positive, increasing the risk
coxph(Surv(ttAll, status)~trt)
library(asaur)
head(pharmacoSmoking)
#pharmacoSmoking$ageGroup4
library(asaur)
attach(pharmacoSmoking)
## model A: ageGroup4
modelA.coxph = coxph(Surv(ttr, relapse)~ageGroup4)
modelA.coxph
## model B: employment
modelB.coxph = coxph(Surv(ttr, relapse)~employment)
modelB.coxph
## model C: ageGroup4+employment
modelC.coxph = coxph(Surv(ttr, relapse)~ageGroup4+employment)
modelC.coxph
### log-likelihood
logLik(modelA.coxph)
logLik(modelB.coxph)
logLik(modelC.coxph)
### model A vs model C
pchisq(2*(logLik(modelC.coxph)-logLik(modelA.coxph)), df=5-3, lower.tail=F)
### model B vs model C
pchisq(2*(logLik(modelC.coxph)-logLik(modelB.coxph)), df=5-2, lower.tail=F)
logLik(modelC.coxph)
as.numeric(logLik(modelC.coxph))
